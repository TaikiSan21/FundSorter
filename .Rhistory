print("I did it!")
## In this project you will investigate the exponential distribution in R and compare it
## with the Central Limit Theorem. The exponential distribution can be simulated in R with
## rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution
## is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations.
## You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
## Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.  You should
## 1. Show the sample mean and compare it to the theoretical mean of the distribution.
## 2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
## 3. Show that the distribution is approximately normal.
## In point 3, focus on the difference between the distribution of a large collection of random exponentials and the distribution of a large collection of averages of 40 exponentials.
lambda <- 0.2
numObs <- 40
numSims <- 1000
## Create a vector of 1000 simulations of the average of 40 exponentials
expAverage <- NULL
for(i in 1:numSims) {
expAverage <- c(expAverage, mean(rexp(numObs, lambda)))
}
## Create a vector of 1000 simulations of exponentials
expos <- rexp(numSims, lambda)
## Theoretical values for mean and SD, using sd = sd/sqrt(n)
thMean <- 1/lambda
thSD <- (1/lambda)/sqrt(40)
x <- seq( thMean - 4*thSD, thMean + 4*thSD, length=100)
norm <- dnorm(x, mean=thMean, sd=thSD)
par(mfrow=c(2,2))
for(i in c(20,50,500,1000)) {
hist(expAverage[1:i], breaks=20,freq=FALSE,col='gray',
xlab=paste('SD:', round( sd(expAverage[1:i]),3) ),
main=paste('Histogram of',i,'Samples'))
points(x, norm, type='l', col='darkgreen',lwd=3)
abline(v=5, col='red',lwd=2)
abline(v=mean(expAverage[1:i]), col='blue', lwd=2)
if(i==20) {legend(x=5.5,y=1.1,col=c("red",'blue', "darkgreen"),
legend=c("Expected Mean",'Sample Mean', "Normal Distribution"), lty=1,
cex=.8, bty='n',xpd=NA)}
}
library(datasets)
data <- data(ToothGrowth)
rm(expAverage, expos)
rm(norm)
data
data(ToothGrowth)
head(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
?geom_points
library(ggplot2)
?geom_points
library(ggplot2)
g <- ggplot(data=ToothGrowth, aes(dose,len)) +
geom_point(colour=supp)
g
library(datasets)
data(ToothGrowth)
library(ggplot2)
g <- ggplot(data=ToothGrowth, aes(dose,len)) +
geom_point(colour=supp)
g
names(ToothGrowth)
library(datasets)
data(ToothGrowth)
myDat <- ToothGrowth
library(ggplot2)
g <- ggplot(data=myDat, aes(dose,len)) +
geom_point(colour=supp)
g
g <- ggplot(data=myDat, aes(dose,len)) +
geom_point(aes(colour=factor(supp))
g
library(ggplot2)
g <- ggplot(data=myDat, aes(dose,len)) +
geom_point(aes(colour=factor(supp)))
g
table(myDat)
?table
table(myDat$supp, myDat$dose)
t.test(myDat[dose==2,'len'], myDat[dose==1,'len'], paired=FALSE, var.equal=TRUE)
t.test(myDat[myDat$dose==2,'len'], myDat[myDat$dose==1,'len'], paired=FALSE, var.equal=TRUE)
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot()
p
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot(aes(colour=factor(supp)))
p
t.test(my
t.test(myDat[myDat$supp=='OJ','len'], myDat[myDat$supp=='VC','len'], paired=FALSE, var.equal=TRUE)
t.test(myDat[myDat$supp=='OJ','len'], myDat[myDat$supp=='VC','len'], paired=FALSE, var.equal=TRUE)
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot(aes(colour=c('orange','green')))
p
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot(aes(colour=c('orange'))
p
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot(aes(colour=c('orange')))
p
p <- ggplot(data=myDat, aes(factor(supp),len)) +
geom_boxplot(aes(colour=factor(supp)))
p
dim(myDat)
head(myDat,10)
t.test(myDat[(myDat$supp=='OJ' && myDat$dose==2),'len'], myDat[(myDat$supp=='VC' && myDat$dose==2),'len'], paired=FALSE, var.equal=TRUE)
test <- split(myDat$len, myDat$supp)
str(test)
str('OJ')
test('OJ')
test['OJ']
install.packages(reshape2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
## Playing with xl file for Gerhard
library(xlsx)
library(dplyr)
setwd('./Downloads')
pwd
pwd()
getwd()
read.xlsx?
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx',
?read.xlsx
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx', 1, 'rows802', as.data.frame = TRUE)
str(xlData)
names(xData)
names(xlData)
wt1name <- names(xlData)[13]
wt1 <- 0.5
wt2name <- names(xlData)[14]
wt2 <- 0.5
xlData['Weighted'] = wt1*xlData[wt1name] + wt2*xlData[wt2name]
test <- [1,4,5,7,1,2,4]
test <- c(1,4,5,7,1,2,4)
rank(test)
order(test)
length(test)
xlData['Weighted'] = wt1*rank(xlData[wt1name]) + wt2*rank(xlData[wt2name])
xlData$Weighted
sum(xlData$Weighted)/982
rank(xlData$Weighted)
arrange(xlData, Weighted)
arrange(xlData, Weighted)[1:10,]
?rank
xlData['Weighted'] = wt1*rank(-xlData[wt1name]) + wt2*rank(-xlData[wt2name])
arrange(xlData, Weighted)[1:10,c('Name', wt1name, wt2name)]
?list
?append
wtNames <- c()
append(wtNames, names(xlData)[13])
append(wtNames, names(xlData)[14])
wtNames <- append(wtNames, names(xlData)[13])
wtNames <- append(wtNames, names(xlData)[14])
wtNames
wtNames <- append(wtNames, NA)
wtNames
wtNames <- c(wt1name, wt2name)
wtAmounts <- c(wt1, wt2)
?seq_len
seq_len(5)
seq_along(5)
seq_along(xlData)
seq_along(wtNames)
x = 1
x += 1
xlData['Test'] = xlData['Test'] + 1
xlData['Weighted'] <- 0
xlData['Weighted'] <- 0
for(i in seq_along(wtNames)) {
xlData$Weighted <- xlData$Weighted + wtAmounts[i]*rank(-xlData[wtNames[i]])
}
str(xlData)
arrange(xlData, Weighted)[1:10,c('Name', wt1name, wt2name)]
xlData['RankAverage'] <- 0
xlData['NormAverage'] <- 0
mean(xlData$Weighted)
std(xlData$Weighted)
stdev(xlData$Weighted)
sd(xlData$Weighted)
xlData['RankAverage'] <- 0
xlData['NormAverage'] <- 0
# Make weights
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage + wtAmounts[i]*(xlData[wtNames[i] - mean(xlData[wtNames[i]]))/sd(xlData[wtNames[i]])
}
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage + wtAmounts[i]*(xlData[wtNames[i] - mean(xlData[wtNames[i]]))/sd(xlData[wtNames[i]])
}
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage + wtAmounts[i]*(xlData[wtNames[i]] - mean(xlData[wtNames[i]]))/sd(xlData[wtNames[i]])
}
xlData[wtNames[1]]
xlData[wtNames[2]]
mean(xlData[wtNames[2]])
?mean
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage +
wtAmounts[i]*(xlData[wtNames[i]] - mean(xlData[wtNames[i]], na.rm=TRUE))/sd(xlData[wtNames[i]], na.rm=TRUE)
}
str(xlData)
mean(xlData[wtNames[2]], na.rm = TRUE)
xlData[wtNames[2]]
mean(xlData[wtNames[2]], na.rm = TRUE)
mean(xlData[[wtNames[2]]], na.rm = TRUE)
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage +
wtAmounts[i]*(xlData[wtNames[i]] - mean(xlData[[wtNames[i]]], na.rm=TRUE))/sd(xlData[[wtNames[i]]], na.rm=TRUE)
}
str(xlData)
arrange(xlData, desc(NormAverage))[1:10,c('Name', wt1name, wt2name)]
arrange(xlData, RankAverage)[1:10,c('Name', wt1name, wt2name)]
xlData['NormAverage'] <- 0
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage +
wtAmounts[i]*(xlData[wtNames[i]] - mean(xlData[[wtNames[i]]], na.rm=TRUE))/sd(xlData[[wtNames[i]]], na.rm=TRUE)
}
str(xlData)
xlData['NormAverage'] <- 0
# Make weights
for(i in seq_along(wtNames)) {
xlData$RankAverage <- xlData$RankAverage + wtAmounts[i]*rank(-xlData[wtNames[i]])
xlData$NormAverage <- xlData$NormAverage +
wtAmounts[i]*(xlData[[wtNames[i]]] - mean(xlData[[wtNames[i]]], na.rm=TRUE))/sd(xlData[[wtNames[i]]], na.rm=TRUE)
}
str(xlData)
arrange(xlData, desc(NormAverage))[1:10,c('Name', wt1name, wt2name)]
arrange(xlData, RankAverage)[1:10,c('Name', wt1name, wt2name)]
str(xlData)
getwd()
library(shiny)
setwd('./Prudential')
setwd('.\Prudential')
setwd('~/Prudential')
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx', as.data.frame = TRUE)
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx', 1, as.data.frame = TRUE)
setwd('./Downloads')
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx', 1, as.data.frame = TRUE)
setwd('~/Downloads')
xlData <- read.xlsx('ALL PRU CHOICE FUNDS.xlsx', 1, as.data.frame = TRUE)
str(xlData)
x = c('a','b')
wtNames
select(xlData, wtNames)
xlData[wtNames]
xlData[append('Name',wtNames)]
runApp()
setwd('~/Prudential')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d <- data.frame()
d['f'] <- 0
d['f'] <- 0
runApp()
d <- data.frame( c(0))
d
d['f'] <- 0
d
runApp()
runApp()
